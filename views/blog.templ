// views/blog.templ
package views

import (
	"gosurpher/models"
)

/*
This is the rendering of the Blog's Main Page. This component receives a slice of Blogs
alongside with a slice of the summary of the blog.
*/

templ BlogMainPage(blogs []models.Blog, summary []string) {
	@Layout("Gosurpher | Blogs") {
		<section class="bg-white dark:bg-gray-900">
			<div class="py-8 px-4 mx-auto max-w-screen-xl lg:py-16 lg:px-6">
				<div class="mx-auto max-w-screen-sm text-center lg:mb-16 mb-8">
					<h2 class="mb-4 text-3xl lg:text-4xl tracking-tight font-extrabold text-gray-900 dark:text-white">My Blog</h2>
					<p class="font-light text-gray-500 sm:text-xl dark:text-gray-400">Just some display of the blogs that I have done.</p>
				</div>
				<div class="grid gap-8 lg:grid-cols-2">
					// Iterate through the list of Blogs to generate the cards
					for i := 0; i < len(blogs); i++ {
						@BlogCard(blogs[i], summary[i])
					}
				</div>
			</div>
		</section>
	}
}

/*
This component renders the card that displays the summary and information
regarding the Blog of concern. Links the user to page and renders the
relevent blog in mind.
*/

templ BlogCard(blog models.Blog, summary string) {
	<article class="p-6 bg-white rounded-lg border border-gray-200 shadow-md dark:bg-gray-800 dark:border-gray-700">
		<div class="flex justify-between items-center mb-5 text-gray-500">
			<span class="bg-primary-100 text-primary-800 text-xs font-medium inline-flex items-center px-2.5 py-0.5 rounded dark:bg-primary-200 dark:text-primary-800">
				<svg class="mr-1 w-3 h-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M2 5a2 2 0 012-2h8a2 2 0 012 2v10a2 2 0 002 2H4a2 2 0 01-2-2V5zm3 1h6v4H5V6zm6 6H5v2h6v-2z" clip-rule="evenodd"></path><path d="M15 7h1a2 2 0 012 2v5.5a1.5 1.5 0 01-3 0V7z"></path></svg>
				{ blog.Type }
			</span>
			<span class="text-sm">{ blog.Date.Format("01-02-2006") }</span>
		</div>
		<h2 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white"><a href={ templ.URL(blog.Route) }>{ blog.Title }</a></h2>
		<p class="mb-5 font-light text-gray-500 dark:text-gray-400">{ summary }</p>
		<div class="flex justify-between items-center">
			<div class="flex items-center space-x-4">
				<span class="font-medium dark:text-white">
					{ blog.Autor }
				</span>
			</div>
			<a href={ templ.URL(blog.Route) } class="inline-flex items-center font-medium text-primary-600 dark:text-primary-500 hover:underline">
				Read more
				<svg class="ml-2 w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
			</a>
		</div>
	</article>
}

// Component that renders individual links in blogs
var link_class = "font-medium text-blue-600 underline dark:text-blue-500 hover:no-underline"

templ RenderLink(link models.Link) {
	<a class={ link_class } href={ templ.URL(link.Url) }>[{ link.Text }]</a>
}

/*
Component that renders each paragraphs. Written mainly to handle the presence of links
within the text.
*/

templ Paragraph(p models.Paragraph) {
	if len(p.Texts) == 1 {
		{ p.Texts[0] }
	} else if len(p.Texts) == 2 {
		{ p.Texts[0] }
		@RenderLink(p.Urls[0])
		{ p.Texts[1] }
	} else {
		{ p.Texts[0] }
		for i := 1; i < len(p.Texts) - 1; i++ {
			{ p.Texts[i] }
			@RenderLink(p.Urls[i-1])
		}
		{ p.Texts[len(p.Texts) - 1] }
	}
}

/*
Rendering of the actual blog page.
TODO: Figure out how to use hx-get for button
*/

templ BlogPage(blog models.Blog, content []models.Paragraph) {
	@Layout(blog.Title) {
		<div class="container mx-auto px-4 py-4 w-full items-center rounded-lg border shadow-md">
			<section class="bg-white dark:bg-gray-900">
				<div class="py-8 px-4 mx-auto max-w-screen-xl lg:py-16 lg:px-6">
					<div class="max-w-screen-lg text-gray-500 sm:text-lg dark:text-gray-400">
						<h2 class="mb-4 text-4xl tracking-tight font-bold text-gray-900 dark:text-white">{ blog.Title }</h2>
						<div class="flex flex-col gap-2 text-md">
							<p class="text-base font-bold tracking-wide text-gray-900"></p>
							<a class="text-base font-bold tracking-wide text-gray-900" href="#">{ blog.Autor }</a>
							<a class="text-base font-bold tracking-wide text-gray-900" href="#">{ blog.Type }</a>
							<br/>
							<p>{ blog.Date.Format("01-02-2006") }</p>
						</div>
						<br/>
						// alternate between dark and light mode
						for i := 0; i < len(content); i++ {
							if i % 2 == 0 {
								<p class="mb-4 font-light">
									@Paragraph(content[i])
								</p>
							} else {
								<p class="mb-4 font-dark">
									@Paragraph(content[i])
								</p>
							}
						}
					</div>
				</div>
			</section>
		</div>
	}
}
